section
    h1 Node.js
    h1 Introduction
    h4 by Mateusz Jaworski
    h4 April 2016

section
    section
        img.logo(src="src/images/nodejs.png")
        ul
            li open-source, cross-platform, MIT license
            li asynchronous, event driven
            li event loop as a language construct not library
            li shell/repl (read-eval-print-loop)
            li npm - package manager
            li other: Twisted (python), Vert.x (Java, Ruby, Scala, Clojure...)

    section
        h2 History
        ul
            li 2009 - originally written by Ryan Dahl
            li 2011 - added npm and support for Windows
            li 2014 - Fedor Indutny started io.js, a fork of Node.js
            li 2015 - Node.js v0.12 and io.js v3.3 merged back into Node v4.0

    section
        h2 Node.js Foundation
        blockquote(cite="https://nodejs.org/en/foundation/").
            The Node.js Foundation's mission is to enable widespread adoption and help accelerate development of Node.js and other related modules through an open governance model that encourages participation, technical contribution, and a framework for long term stewardship by an ecosystem invested in Node.js' success.
        ul
            li Node.js is a trademark of Joyent, Inc. (high-performance cloud computing)
            li Foundation corporate members: IBM, Intel, Microsoft, RedHat, PayPal, Joyent...
            li ~300 active contributors (~900 in total)

section
    section
        h2 Architecture

    section
        img(height=500 src="src/images/architecture.png")
        small @source: &nbsp;
            a(href="http://mcgill-csus.github.io/student_projects/Submission2.pdf") An Inside Look at the Architecture of NodeJS

    section
        h2 Architecture
        ul
            li core written in C, C++
            li single main thread, non-blocking I/O calls
            li no cost of thread context switching
            li thread pool for parallel tasks, when done main thread wakes up and executes the registered callback
            li registered within operating system, operating system issues a callback on connection

    section
        img.logo(src="src/images/v8.png")
        h2 Googleâ€™s V8 JavaScript engine
        ul
            li compiles JavaScript into native code
            li garbage collector
            li optimizer
            li re-optimizer (at runtime)
                ul
                    li based on heuristics of the code's execution profile
                    li inline expansion
                    li inline caching
                    li copy elision

    section
        img.logo(src="src/images/libuv.png")
        h2 libuv - multi-platform asynchronous I/O
        ul
            li developed for use by Node.js, also used by others
            li event loop
            li asynchronous TCP/UDP sockets and DNS resolution
            li asynchronous file system operations
            li child processes
            li thread pool

    section
        h2 Miscellaneous
        ul
            li possibility to write C++ addons
            li debugging - IDE ot Chrome Dev Tools
            li build in modules: fs, os, path, querystring, zlib, vm, crypto
            li globals: console, require, process, module, exports, global

section
    section
        h2 Code

    section
        h2 Frameworks
        ul
            li Express.js, Hapi.js, Koa.js - minimalist
            li Socket.io - for real-time apps
            li Sails, Derby - MVC frameworks
            li Meteor - pure magic

    section
        h2 Basics
        pre
            code.hljs.javascript.
                var http = require('http');

                var handleRequest  = function (req, res) {
                    res.writeHead(200, {'Content-Type': 'text/plain'});
                    res.end('Hit: ' + req.url);
                };

                http.createServer(handleRequest).listen(3000, function () {
                    console.log("Server listening on: http://localhost:3000");
                });

    section
        h2 Express
        pre
            code.hljs.javascript.
                var express = require('express');
                var app = express();

                app.get('/', function (req, res) {
                    res.send('Hello GET');
                });

                app.post('/', function (req, res) {
                    res.send('Hello POST!');
                });

                app.listen(3000, function () {
                    console.log("Server listening on: http://localhost:3000");
                });

    section
        h2 Express - static content
        pre
            code.hljs.javascript.
                var express = require('express');
                var app = express();

                app.use('/static', express.static(__dirname + 'public'));

                app.listen(3000, function () {
                    console.log("Server listening on: http://localhost:3000");
                });

    section
        h2 Express - jade templates
        span app.js
        pre
            code.hljs.javascript.
                var express = require('express');
                var app = express();

                app.set('views', __dirname + '/views');
                app.set('view engine', 'jade');

                app.get('/', function(req, res){
                    res.render("index", {message: 'Hello world!'});
                });

                app.listen(3000, function () {
                    console.log("Server listening on: http://localhost:3000");
                });

        span views/index.jade
        pre
            code.hljs.javascript.
                html
                  head
                    title title
                  body
                    h1= message

    section
        h2 Live demo
        pre
            code.hljs.javascript.
                npm install express-generator -g
                express myapp

    section
        h2 Forever
        pre
            code.hljs.javascript.
                npm install forever -g
                forever start app.js
        pre
            code.hljs.javascript.
                NODE_ENV=production forever start -l forever.log -o out.log -e err.log app.js
        pre
            code.hljs.javascript.
                forever list
        pre
            code.hljs.javascript.
                forever stop app.js
        pre
            code.hljs.javascript.
                forever stopall

section
    section
        h2 Scaling

    section
        h2 Scaling - cluster
        pre
            code.hljs.javascript.
                const cluster = require('cluster');
                const http = require('http');
                const numberOfCpus = require('os').cpus().length;

                function spawnMaster() {
                    for (var i = 0; i < numberOfCpus; i++) {
                        cluster.fork();
                    }
                    cluster.on('exit', (worker, code, signal) => {
                        console.log(`worker ${worker.process.pid} died`);
                    });
                }

                function spawnFork() {
                    // Workers can share any TCP connection, in this case it is an HTTP server
                    http.createServer((req, res) => {
                        res.writeHead(200);
                        res.end('hello world\n');
                    }).listen(8000);
                }

                cluster.isMaster ? spawnMaster() : spawnFork();

    section
        h2 Scaling - forks
        pre
            .filename main.js
            code.hjls.javascript.
                const child_process = require('child_process');
                const fork = child_process.fork('fork.js');

                fork.on('message', message => {
                  console.log('Parent got message: ', message);
                });

                fork.send({ data: 123 });
        pre
            .filename fork.js
            code.hjls.javascript.
                process.on('message', message => {
                    console.log('Child got message:', message);

                    process.send({ data: 456 });
                });

section
    section
        h2 Future
        ul
            li long-term support plan (LTS)
            li Microsoft Chakra Core engine usage
            li involvement of large companies like Intel, Microsoft and IBM
            li IoT, Mobile

section
    h2 This is all for now...

section
    h2 Thanks!













